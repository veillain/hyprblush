#!/bin/bash
#environments
options=$1
choice=$(echo $@ | grep -oP "(?<=$options ).*")
config_path="$HOME/.config"
dotman_config="$HOME/.config/dotman/config.sh"
dotfile_path=$(cat $dotman_config | grep path | awk '{print $3}')

confirm=""
whatisit=""
confirmation (){
    case $whatisit in
        remove) echo -n ":: Are you sure to remove ($choice) from dotfiles? [Y/n] " ;;
        syncall) echo -n ":: Syncing all will overwrite the folder/file(s) in the dotfiles. Are you sure? [Y/n] " ;;
        overwrite) echo -n ":: Are you sure to overwrite ($choice)? [Y/n] " ;;
        *) echo -n "Are you sure [Y/n] " ;;
    esac
    read answer
    case $answer in
        [yY]) confirm="yes" ;;
        [nN]) confirm="no" ;;
        *) confirm="yes" ;;
    esac
}

wrong_input (){
    echo "wrong input. use 'dotman -h' for help."
}

path (){
    echo "Your path is: '$dotfile_path'"
}

help (){
    echo "usage:  dotman <operation> [...]
operations:
    dotman {-h help}                        Show this help
    dotman {-l list}                        Show List of Configuration included in dotfiles
    dotman {--set set} [path/to/dotfiles]   Set your dotfiles path/directory
    dotman {-p path}                        Check your dotfiles path
    dotman {-S sync} [package(s)]           Copy your config into dotfiles
    dotman {-Su syncall} [package(s)]       Update all your config inside dotfiles
    dotman {-r remove} [package(s)]         Remove your config from dotfiles
    dotman {-o overwrite} [package(s)]      Copy and Overwrite the original one with symlinks from dotfiles

use 'dotman {-h --help}' to show this."
}

set (){
    if [ -z "$choice" ]; then
        echo "Usage: dotman set </path/to/your/dotfiles>"
    elif [[ "$choice" = . ]]; then
        rn=$(pwd)
        echo "path = $rn" > $dotman_config
        if [ $? -eq 0 ]; then
            echo "Dotfiles path changed to '$rn'"
        else
            echo "Failed to change the path"
        fi
    else
        echo "path = $choice" > $dotman_config
        if [ $? -eq 0 ]; then
            echo "Dotfiles path changed to '$choice'"
        else
            echo "Failed to change the path"
        fi
    fi
}

sync (){
    echo "resolving packages..."
    echo "looking for conflicting packages in the dotfiles..."
    numberpkg=1
    for pkg in ${choice[@]}; do
        check=$(ls $config_path/$pkg)
        size=$(du -sh $config_path/$pkg | awk '{print $1}')
        dotsize=$(du -sh $dotfile_path/.config/$pkg | awk '{print $1}')
        if [ ! -d "$dotfile_path/.config/$pkg" ]; then
            echo ""
            echo "Packages ($numberpkg) $pkg"
            echo ""
            echo "Package Folder Size: $size"
            echo "Net Upgrade Size: $size"
            echo ""
            read -p ":: Proceed to sync packages? [Y/n]" ansor
            case $ansor in
                [yY])
                    mkdir -p ${dotfile_path}/.config/${pkg}
                    ;;
                [nN])
                    echo "cancelled"
                    ;;
                *)
                    mkdir -p $dotfile_path/.config/$pkg 
                    ;;
            esac
        elif [ -d "$dotfile_path/.config/$pkg" ]; then
            echo "warning: $pkg is already inside dotfiles -- syncing"
            echo ""
            echo "Packages ($numberpkg) $pkg"
            echo ""
            echo "Package Folder Size: $dotsize"
            echo "Updated Folder Size: $size"
            echo ""
        fi
        if [ "$check" ]; then
            cp -rf $config_path/$pkg $dotfile_path/.config
            if [ $? -eq 0 ]; then
                echo "Copied $pkg Config files into dotfiles($dotfile_path)."
            else
                echo "Failed to copy $pkg into dotfiles"
            fi
        else
            echo "$pkg is nowhere inside $config_path"
        fi
        numberpkg=$(($numberpkg + 1))
    done
    if true; then
        echo ""
        echo "Use 'dotman -l' to see all files inside dotfiles!"
    fi
}
syncall (){
    path=$(ls ${dotfile_path}/.config)
    whatisit="syncall"
    echo "resolving packages..."
    echo "listing all packages folder in the dotfiles..."
    confirmation
    if [ "$confirm" = yes ]; then
        for pkg in $path; do
            cp -rf $config_path/$pkg $dotfile_path/.config
            if [ $? -eq 0 ]; then
                echo "Updated $pkg files."
            else
                cp -f $config_path/$pkg $dotfile_path/.config
                if [ $? -eq 0 ]; then
                    echo "Updated $pkg file."
                else
                    echo "Fail to update $pkg"
                fi
            fi
        done
    else
        echo "Interrupt signal received"
    fi
}

remove (){
    whatisit="remove"
    confirmation
    if [[ "$confirm" == yes ]]; then
        for pkg in ${choice[@]}; do
            check=$(ls $dotfile_path/.config/$pkg)
            if [ "$check" ]; then
                    rm -rf $dotfile_path/.config/$pkg
                    if [ $? -eq 0 ]; then
                        echo "$pkg has been removed from dotfiles($dotfile_path)."
                    else
                        echo "failed to remove $pkg from dotfiles($dotfile_path)."
                    fi
            else
                echo "$pkg is nowhere in dotfiles."
            fi
        done
    else
        echo "Interrupt signal received"
    fi
}

overwrite (){
    check=$(ls $config_path/$choice)
    if [ "$check" ]; then
        whatisit="overwrite"
        confirmation
        if [[ "$confirm" == yes ]]; then
            mv -f $config_path/$choice $dotfile_path
            if true; then
                ln -s $dotfile_path/$choice $config_path
                if [ $? -eq 0 ]; then
                    echo "Overwriting ($choice) success"
                else
                    echo "fail to Overwrite ($choice)"
                fi
            fi
        else
            echo "process cancelled."
        fi
    fi
}

list (){
    check=$(ls $dotfile_path/.config)
    if [ "$check" ]; then
        list=$(ls -la $dotfile_path/.config | awk '{print $9}' | grep -vE '^\.$|^\.\.$' | grep -v '^$')
        number=1
        echo "List of Configuration inside dotfiles:"
        echo "No. Configuration"
        for folder in $list; do
            if [ "$number" -lt 10 ]; then
                echo " ${number}. $folder"
                number=$(($number + 1))
            else
                echo "${number}. $folder"
                number=$(($number + 1))
            fi
        done
    else
        echo "there's nothing in your dotfiles($dotfile_path)."
    fi
}


#first-time-run
echo ""

check=$(ls $HOME/.config/dotman)
if [ ! "$check" ]; then
    mkdir -p $HOME/.config/dotman
    echo "path = " > $dotman_config
fi

case $1 in
    -p|--path|path|-d|--dir|dir) path ;;
    --set|--set-path|--set-dir|set|set-path|set-dir) set ;;
    -[sS]|--sync|sync) sync ;;
    -[sS][uU]|-[sS][aA]|--syncall|syncall) syncall ;;
    -[rR]|--remove|remove) remove ;;
    -[oO]|--overwrite|overwrite) overwrite ;;
    -[lL]|--list|list) list ;;
    -[hH]|--help|help) help ;;
    *) wrong_input ;;
esac
